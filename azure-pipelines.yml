# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Build.SourceBranchName)-$(Build.BuildId)

trigger:
 branches:
  include:
    - main

stages:
  - stage: CI
    displayName: Continuous Integration
    
    jobs:
      - job: Build
        displayName: Build, Test, Pack
        pool:
          vmImage: ubuntu-latest
        steps:

          - task: gitversion/setup@0
            displayName: Install GitVersion tool
            inputs:
              versionSpec: '5.x'

          - task: gitversion/execute@0
            displayName: Calculate appropriate SemVer

          - task: DotNetCoreCLI@2
            displayName: 'Create NuGet pkg'
            inputs:
              command: 'pack'
              packagesToPack: '**/*.csproj'
              versioningScheme: 'byEnvVar'
              versionEnvVar: 'NuGetVersionV2'
              verbosityPack: 'Diagnostic'
          
          - task: PublishPipelineArtifact@1
            displayName: Publish Pipeline artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'drop'
              publishLocation: 'pipeline'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish NuGet to Internal feed'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '0f18b7db-fb6c-46c5-b364-4584de3e42e4/624b3892-88df-430d-a184-f05c92de3644'
  
  - stage: CD
    displayName: Continuous Deployment
    dependsOn: CI
    #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
    jobs:
      - deployment: Deploy
        displayName: Deploy to QA env
        pool:
          vmImage: ubuntu-latest
        environment: singlet-sample-app-QA
        strategy:
         runOnce:
           deploy:
             steps:
               - pwsh: ls $(Pipeline.Workspace) -R
                 displayName: List Pipeline.Workspace contents
